#print(pow(64, len("censored")*4))
#print(257/129)
#print(129+1+3+129+65+65+65+64+64)
p_q = {'example': (int("F2B0A12A3B39CD599D8FD1A4E77A6CAF2E02B6EC51737F4DAC7B8BA9AB7D22ED0C039D5282FE1CFBC760A3BE435409D3E4FA0B0611C924055A7BEAD4302E247F", 16),
    int("D17B8DC2B327652E3E62FA2696D67328ABC9B8CC226D9E0B14795356D894D613F80E3DA0E152120E70A2CC200B21FD8033E4D99C29AB7AAE77D1C3ED19F46DC9", 16),
   "C695C7A7B28ADE75C7A7B28ADE75C7A7B28ADE75C7A7B28ADE7754D4C619E39026E8C3165CECF2292351363E8E9A22008177DFBA8B435421F626F2F47A92A8AA2F3F24F28E0B628064ABFF49C7BA6057626A86BE2EC2F95A4105338BD738A8F297A7E406A14BBD7F5CE9F0E448329789985EEE036D030BDDEE6DAD3BA9D0BAB7" ),

    'test_quiz': (int("DCBB40D01F3200BE66B31FB0A18CCFD0B424BB8D533EFA658BFDC0E9B030BD765460DA58A8DA83BBCC2C5784827D5ABA9861F1E9B619024CAF7990DD5043356D", 16),
    int("C7A6919E8AD40F6273BA5528F638A1567C1DA99CE26981F04959DC9A848E08DF162BE7B2FA85D63E6E6778E62A3EA4CF5BA903210A88C45AC445EFBD9AEA36C7", 16),
   "AC25C7A7B28ADE75C7A7B28ADE75C7A7B28ADE75C7A7B28ADE7495A350CB25DF8D5997D9B9468E720E272636DCAAB4A450D111D096B299C586C9D2F1870D4AC6D3D95AA0E9ECA5A24584E3E8788246DF2C67C215B7994EF59DA2791DBAD832C23377D4CF0F90E5F551155651A57EC6CF77914D8AE81D618D73824B02F92585BB" ),
    'quiz_1': ( int("D4CF5ECA910928E6E10B872A258B917B1072E41C65D1B592BF1262ECF6FE62E98B1F191557276D0276C19D8467907367E4AA86503F97986F921F0B54E840FF15", 16),
    int("CB1379279EA89936B6FB2BB862D7ED5891B78FD36724B51954DF3F41176FE30E0E5C736ADB622E2B9F6CFC347E6475EB6214BE78A8709E9567C999F76160C9F9", 16),
    "A8D1C7A7B28ADE75C7A7B28ADE75C7A7B28ADE75C7A7B28ADE76DF64D827833D1F6ABADBF7E521E81D53771A0CA982BA6B6B5DF77352E5B9743433514ABB15BB347CD100234DF14E05577CE2BA69B034303D41D17A29C1FD0D80BCA13458C2E5426A497C06234BEF7CF64DF25F15A78A925254F196A109CC9596133A8C5F986D" ),
    'quiz_2': ( int("F3E0C7431A235AF9B30D22AF0C754FF36981C0975E4BB4D12BE3D12E3747E67C1116D215BF666F8DAF6C469B101060E1D8CADE21483B64BA83328676C2576E75", 16),
    int("D90F8E7C7D53BB8C8E6F3EAA1A4C42AFCEB6486A270F7F35A332EE567D87081E73CE9D24587418AD7ADB1372EBFD435EB61F256D7FFE0A9EE9BFAA047EF72D9B", 16),
    "CEC9C7A7B28ADE75C7A7B28ADE75C7A7B28ADE75C7A7B28ADE75CC898B5403C712206D745E482F9F854404FC279F18A4748381B903EAC1B67F74E9CE6C0393749DFDEE995ABBF7AA36F21F57B2D9318EDD3F1FDB43DF509C2D00A01E7D7912FDE33909D40C08BF15021346F26BACE13350F656192C2081CE8079409E323D71D7" )
}

use = 'quiz_2'

print("p: {0}".format(p_q[use][0]))
print("q: {0}\n".format(p_q[use][1]))

n = p_q[use][0] * p_q[use][1]
print("n: {0}".format(n))
n_hex = hex(n).upper()[2:]
print("n(hex): {0}".format(n_hex))
old_n = p_q[use][2]
print("Same.." if hex(n).upper()[2:] == old_n else "Not same! Yay!")

for i in range(len(n_hex)-1):
    if n_hex[i:i+1] != old_n[i:i+1]:
        print("{0}:\t{1}\t{2}".format(i, n_hex[i:i+1], old_n[i:i+1]))
