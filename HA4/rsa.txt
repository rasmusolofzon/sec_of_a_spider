7.1.1.  Encryption Operation

   RSAES-OAEP-ENCRYPT ((n, e), M, L)

   Options:

      Hash     hash function (hLen denotes the length in octets of
               the hash function output)
      MGF      mask generation function

   Input:

      (n, e)   recipient's RSA public key (k denotes the length in
               octets of the RSA modulus n)
      M        message to be encrypted, an octet string of length mLen,
               where mLen <= k - 2hLen - 2
      L        optional label to be associated with the message; the
               default value for L, if L is not provided, is the empty
               string

   Output:

      C        ciphertext, an octet string of length k

   Errors:  "message too long"; "label too long"

   Assumption:  RSA public key (n, e) is valid

   Steps:

      1.  Length checking:

          a.  If the length of L is greater than the input limitation
              for the hash function (2^61 - 1 octets for SHA-1), output
              "label too long" and stop.

          b.  If mLen > k - 2hLen - 2, output "message too long" and
              stop.

      2.  EME-OAEP encoding (see Figure 1 below):

          a.  If the label L is not provided, let L be the empty string.
              Let lHash = Hash(L), an octet string of length hLen (see
              the note below).

          b.  Generate a padding string PS consisting of k - mLen -
              2hLen - 2 zero octets.  The length of PS may be zero.




Moriarty, et al.              Informational                    [Page 22]
 
RFC 8017                      PKCS #1 v2.2                 November 2016


          c.  Concatenate lHash, PS, a single octet with hexadecimal
              value 0x01, and the message M to form a data block DB of
              length k - hLen - 1 octets as

                 DB = lHash || PS || 0x01 || M.

          d.  Generate a random octet string seed of length hLen.

          e.  Let dbMask = MGF(seed, k - hLen - 1).

          f.  Let maskedDB = DB \xor dbMask.

          g.  Let seedMask = MGF(maskedDB, hLen).

          h.  Let maskedSeed = seed \xor seedMask.

          i.  Concatenate a single octet with hexadecimal value 0x00,
              maskedSeed, and maskedDB to form an encoded message EM of
              length k octets as

                 EM = 0x00 || maskedSeed || maskedDB.

      3.  RSA encryption:

          a.  Convert the encoded message EM to an integer message
              representative m (see Section 4.2):

                 m = OS2IP (EM).

          b.  Apply the RSAEP encryption primitive (Section 5.1.1) to
              the RSA public key (n, e) and the message representative m
              to produce an integer ciphertext representative c:

                 c = RSAEP ((n, e), m).

          c.  Convert the ciphertext representative c to a ciphertext C
              of length k octets (see Section 4.1):

                 C = I2OSP (c, k).












Moriarty, et al.              Informational                    [Page 23]
 
RFC 8017                      PKCS #1 v2.2                 November 2016


      4.  Output the ciphertext C.

      _________________________________________________________________

                                +----------+------+--+-------+
                           DB = |  lHash   |  PS  |01|   M   |
                                +----------+------+--+-------+
                                               |
                     +----------+              |
                     |   seed   |              |
                     +----------+              |
                           |                   |
                           |-------> MGF ---> xor
                           |                   |
                  +--+     V                   |
                  |00|    xor <----- MGF <-----|
                  +--+     |                   |
                    |      |                   |
                    V      V                   V
                  +--+----------+----------------------------+
            EM =  |00|maskedSeed|          maskedDB          |
                  +--+----------+----------------------------+
      _________________________________________________________________

                   Figure 1: EME-OAEP Encoding Operation

   Notes:

   -  lHash is the hash of the optional label L.

   -  The decoding operation follows reverse steps to recover M and
      verify lHash and PS.

   -  If L is the empty string, the corresponding hash value lHash has
      the following hexadecimal representation for different choices of
      Hash:

      SHA-1:   (0x)da39a3ee 5e6b4b0d 3255bfef 95601890 afd80709

-------------------------------------------------------------------------------

7.1.2.  Decryption Operation

   RSAES-OAEP-DECRYPT (K, C, L)

   Options:

      Hash     hash function (hLen denotes the length in octets of
               the hash function output)
      MGF      mask generation function

   Input:

      K        recipient's RSA private key (k denotes the length in
               octets of the RSA modulus n), where k >= 2hLen + 2
      C        ciphertext to be decrypted, an octet string of length k
      L        optional label whose association with the message is to
               be verified; the default value for L, if L is not
               provided, is the empty string

   Output:

      M        message, an octet string of length mLen, where
               mLen <= k - 2hLen - 2

   Error:  "decryption error"

   Steps:

      1.  Length checking:

          a.  If the length of L is greater than the input limitation
              for the hash function (2^61 - 1 octets for SHA-1), output
              "decryption error" and stop.

          b.  If the length of the ciphertext C is not k octets, output
              "decryption error" and stop.

          c.  If k < 2hLen + 2, output "decryption error" and stop.

      2.  RSA decryption:

          a.  Convert the ciphertext C to an integer ciphertext
              representative c (see Section 4.2):

                 c = OS2IP (C).


Moriarty, et al.              Informational                    [Page 25]
 
RFC 8017                      PKCS #1 v2.2                 November 2016


          b.  Apply the RSADP decryption primitive (Section 5.1.2) to
              the RSA private key K and the ciphertext representative c
              to produce an integer message representative m:

                 m = RSADP (K, c).

              If RSADP outputs "ciphertext representative out of range"
              (meaning that c >= n), output "decryption error" and stop.

          c.  Convert the message representative m to an encoded message
              EM of length k octets (see Section 4.1):

                 EM = I2OSP (m, k).

      3.  EME-OAEP decoding:

          a.  If the label L is not provided, let L be the empty string.
              Let lHash = Hash(L), an octet string of length hLen (see
              the note in Section 7.1.1).

          b.  Separate the encoded message EM into a single octet Y, an
              octet string maskedSeed of length hLen, and an octet
              string maskedDB of length k - hLen - 1 as

                 EM = Y || maskedSeed || maskedDB.

          c.  Let seedMask = MGF(maskedDB, hLen).

          d.  Let seed = maskedSeed \xor seedMask.

          e.  Let dbMask = MGF(seed, k - hLen - 1).

          f.  Let DB = maskedDB \xor dbMask.

          g.  Separate DB into an octet string lHash' of length hLen, a
              (possibly empty) padding string PS consisting of octets
              with hexadecimal value 0x00, and a message M as

                 DB = lHash' || PS || 0x01 || M.

              If there is no octet with hexadecimal value 0x01 to
              separate PS from M, if lHash does not equal lHash', or if
              Y is nonzero, output "decryption error" and stop.  (See
              the note below.)

Moriarty, et al.              Informational                    [Page 26]
 
RFC 8017                      PKCS #1 v2.2                 November 2016


      4.  Output the message M.

      Note: Care must be taken to ensure that an opponent cannot
      distinguish the different error conditions in Step 3.g, whether by
      error message or timing, and, more generally, that an opponent
      cannot learn partial information about the encoded message EM.
      Otherwise, an opponent may be able to obtain useful information
      about the decryption of the ciphertext C, leading to a chosen-
      ciphertext attack such as the one observed by Manger [MANGER].

0063b462be5e84d382c86eb6725f70e59cd12c0060f9d3778a18b7aa067f90b2178406fa1e1bf77f03f86629dd5607d11b9961707736c2d16e7c668b367890bc6ef1745396404ba7832b1cdfb0388ef601947fc0aff1fd2dcd279dabde9b10bfc51efc06d40d25f96bd0f4c5d88f32c7d33dbc20f8a528b77f0c16a7b4dcdd8f

00581bc2381cf79218566065eb1def452262df368e129de319b5c2bb66e84df6be244fc653a9468c6aafbe715fe366526e9596c452cdf7a42ddcec8d8005724dc7d9450b769aa0fe6f58e8949e503294de3106a7a3b0254eac2b94d245421e610ca70466137c29e7ff5ccd41dda83a44457ea3c820d0f360599833d34ec82e3b

00581bc2381cf79218566065eb1def452262df368e129de319b5c2bb66e84df6be244fc653a9468c6aafbe715fe366526e9596c452cdf7a42ddcec8d8005724dc7d9450b769aa0fe6f58e8949e503294de3106a7a3b0254eac2b94d245421e610ca70466137c29e7ff5ccd41dda83a44457ea3c820d0f360599833d34ec82e3b